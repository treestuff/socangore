let data=[];$(document).ready(function(){$("#input-excel").on("change",function(e){let file=e.target.files[0];let reader=new FileReader;reader.onload=function(e){let rawData=new Uint8Array(e.target.result);let workbook=XLSX.read(rawData,{type:"array"});let worksheet=workbook.Sheets[workbook.SheetNames[0]];let json=XLSX.utils.sheet_to_json(worksheet,{header:1});data=json;setupColumnControls(json[0],json.slice(1))};reader.readAsArrayBuffer(file)})});function excelTimestampToDate(serial){const excelEpoch=new Date(1900,0,1);const excelEpochAsUnixTimestamp=excelEpoch.getTime();const millisecondsPerDay=24*60*60*1e3;return new Date(excelEpochAsUnixTimestamp+(serial-2)*millisecondsPerDay)}function isExcelTimestamp(value){const pattern=/^\d+\.\d+$|^\d{5}$|^\d{4,5}-\d{2}-\d{2}$/;return value!==undefined&&value!==null&&pattern.test(value.toString())}function flattenArrayToString(arr){let flatArray=[];for(let i=0;i<arr.length;i++){if(Array.isArray(arr[i])){flatArray=flatArray.concat(flattenArrayToString(arr[i]))}else{flatArray.push(String(arr[i]))}}return flatArray.join("")}function flattenArray(arr){let flatArray=[];for(let i=0;i<arr.length;i++){if(Array.isArray(arr[i])){flatArray=flatArray.concat(flattenArray(arr[i]))}else{let cleanedString=String(arr[i]).replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g,"");flatArray.push(cleanedString)}}return flatArray}function calculateStatistics(rows){let pivotColumns=[];let columnStats={};$('select[id^="stat-"]').each(function(){let index=parseInt($(this).attr("id").split("-")[1]);let stat=$(this).val();if(stat!=="Not in Use"){if(!columnStats[index]){columnStats[index]=[]}columnStats[index].push(stat)}});$(".pivot-input:checked").each(function(){let index=parseInt($(this).attr("id").split("-")[1]);pivotColumns.push(index)});let pivotCombinations=new Set;let results={};rows.forEach(row=>{let pivotValues=pivotColumns.map(i=>row[i]);let key=JSON.stringify(pivotValues);pivotCombinations.add(key);if(!results[key]){results[key]={};for(let column in columnStats){columnStats[column].forEach(stat=>{results[key][`${column}-${stat}`]={}})}}});pivotCombinations.forEach(key=>{let pivotValues=JSON.parse(key);let filteredRows=rows.filter(row=>{return pivotColumns.every((pivotColumn,i)=>{return row[pivotColumn]==pivotValues[i]})});for(let column in columnStats){columnStats[column].forEach(stat=>{let statValues=filteredRows.map(row=>row[column]);let numericStatValues=statValues.map(value=>parseFloat(value)).filter(value=>!isNaN(value));if(stat==="sum"||stat==="mean"){if(numericStatValues.length>0){if(stat==="sum"){results[key][`${column}-${stat}`]=numericStatValues.reduce((a,b)=>a+b,0)}if(stat==="mean"){results[key][`${column}-${stat}`]=results[key][`${column}-sum`]/numericStatValues.length}}}if(stat==="count"){results[key][`${column}-${stat}`]=statValues.length}if(stat==="count unique"){results[key][`${column}-${stat}`]=new Set(statValues).size}})}});return results}function displayStatistics(statistics,headers){let resultsDiv=$("#resultTableContainer");resultsDiv.empty();let table=$("<table></table>").css({width:"100%","border-collapse":"collapse","text-align":"left"});let headerRow=$("<tr></tr>").css({"background-color":"#4CAF50",color:"white"});headerRow.append('<th style="padding: 15px;">Pivot Values</th>');headerRow.append('<th style="padding: 15px;">Column</th>');headerRow.append('<th style="padding: 15px;">Stat</th>');headerRow.append('<th style="padding: 15px;">Value</th>');table.append(headerRow);for(let key in statistics){let pivotValues=key.split(",");for(let columnStat in statistics[key]){let[column,stat]=columnStat.split("-");let value=statistics[key][columnStat];let columnName=headers[parseInt(column)];let dataRow=$("<tr></tr>").css({"border-bottom":"1px solid #ddd",padding:"8px"});dataRow.append(`<td>${pivotValues.join(", ")}</td>`);dataRow.append(`<td>${columnName}</td>`);dataRow.append(`<td>${stat}</td>`);dataRow.append(`<td>${value}</td>`);table.append(dataRow)}}resultsDiv.append(table);resultsDiv.append('<canvas id="pieChart" style="width:50%; height:50%;"></canvas>');setTimeout(function(){var ctx=document.getElementById("pieChart").getContext("2d");let labels=[];let data=[];for(let key in statistics){let pivotValues=key.split(",");for(let columnStat in statistics[key]){let[column,stat]=columnStat.split("-");let value=statistics[key][columnStat];let columnName=headers[parseInt(column)];if(stat==="count"){labels.push(`${pivotValues.join(", ")} - ${columnName}`);data.push(value)}}}new Chart(ctx,{type:"pie",data:{labels:labels,datasets:[{data:data,backgroundColor:["rgba(255, 99, 132, 0.2)","rgba(54, 162, 235, 0.2)","rgba(255, 206, 86, 0.2)","rgba(75, 192, 192, 0.2)","rgba(153, 102, 255, 0.2)","rgba(255, 159, 64, 0.2)"]}]}})},500)}function setupColumnControls(headers,contentRows){let columnControls=$("#column-controls");columnControls.empty();const DATE_THRESHOLD=.9;const UNIQUE_THRESHOLD=.9;headers.forEach((header,index)=>{let tr=$("<tr></tr>");tr.append(`<td>${header}</td>`);let firstValue;for(let i=0;i<contentRows.length;i++){if(contentRows[i][index]!==undefined&&contentRows[i][index]!==null&&contentRows[i][index]!==""){firstValue=contentRows[i][index];break}}let type;if(firstValue!==undefined&&firstValue!==null&&isExcelTimestamp(firstValue)){type="date"}else{type=typeof firstValue}if(type==="number"||type==="string"||type==="boolean"){tr.append('<td><div class="filter-group"></div></td>');let filterGroup=tr.find(".filter-group");filterGroup.append('<select multiple class="filter-input"></select>');let allValues=contentRows.map(row=>{let value=row[index];if(value&&typeof value==="string"&&(value.startsWith("{")&&value.endsWith("}")||value.startsWith("[")&&value.endsWith("]"))){value=value.replace(/[\{\}\[\]"\']/g,"");let values=value.split(",").map(v=>v.trim());values=values.flatMap(v=>{if(v.includes(":")){return v.split(":")[1]?v.split(":")[1].trim():[]}else{return v}});return values}else{return value}}).flat();let uniqueValues=[...new Set(allValues.filter(value=>value!==null&&value!==undefined))];uniqueValues.forEach(value=>{tr.find(".filter-input").append(new Option(value,value))});tr.find(".filter-input").select2();$(".filter-input").select2({width:"100%"});let inputField=tr.find("input.select2-search__field");inputField.removeAttr("style");if(type==="number"){filterGroup.append(`
					<div class="radio-group">
						<input type="radio" id="smaller${index}" name="size${index}" value="smaller">
						<label for="smaller${index}">Smaller</label>
						<input type="radio" id="larger${index}" name="size${index}" value="larger">
						<label for="larger${index}">Larger</label>
					</div>
				`)}}else if(type==="date"){let td=$("<td></td>");let datepickerInput=$('<input type="text" class="filter-date datepicker" />');datepickerInput.css({"background-color":"#ffffff",color:"#000000","font-size":"16px"});td.append(datepickerInput);td.find(".datepicker").datepicker({range:true,multipleDates:true,multipleDatesSeparator:" - ",beforeShow:function(input,inst){$(inst.dpDiv).find(".ui-datepicker-prev, .ui-datepicker-next").css({"text-decoration":"underline",margin:"0 10px"})}});$(".ui-datepicker").css({"background-color":"#ffffff"});let toggleGroup=$("<div></div>");let radioName=`filterMode${index}`;let beforeButton=$(`<input type="radio" id="before${index}" name="${radioName}" class="toggle-input"><label for="before${index}">Before</label>`);let afterButton=$(`<input type="radio" id="after${index}" name="${radioName}" class="toggle-input"><label for="after${index}">After</label>`);toggleGroup.append(beforeButton);toggleGroup.append(afterButton);td.append(toggleGroup);tr.append(td)}else{let uniqueValues=[...new Set(contentRows.map(row=>row[index]))];let selectData=[];uniqueValues.forEach(value=>{if(typeof value==="string"&&value.startsWith("{")&&value.endsWith("}")){let elements=value.slice(1,-1).split(",");elements.forEach(el=>selectData.push({id:el,text:el}))}else{selectData.push({id:value,text:value})}});let filterInput=$("<select></select>");filterInput.select2({data:selectData,multiple:true});tr.append($("<td></td>").append(filterInput))}tr.append(`<td><input type="checkbox" id="pivot-${index}" class="pivot-input"><label for="pivot-${index}">Pivot</label></td>`);tr.append(`<td><select id="stat-${index}"><option>Not in Use</option><option>sum</option><option>mean</option><option>count</option><option>count unique</option></select></td>`);columnControls.append(tr)});let confirmButton=$("<button>Confirm</button>");confirmButton.css({width:"200px",height:"50px",display:"block",margin:"0 auto","background-color":"green",color:"#ffffff","font-size":"16px"});columnControls.append(confirmButton);confirmButton.click(function(){let filteredRows=contentRows;$("tr").each(function(rowIndex,rowElement){let row=$(rowElement);let filter=row.find(".filter-input, .filter-date");let selectedValues=filter.val();if(!selectedValues||selectedValues.length===0){return true}if(filter.hasClass("datepicker")){let dateFilterMode=row.find(".toggle-input:checked").attr("id");let selectedDate=new Date(filter.val());if(dateFilterMode===`after${rowIndex}`){filteredRows=filteredRows.filter(rowData=>{let timestamp=rowData[rowIndex];let rowDate;if(timestamp!==undefined&&timestamp!==null){if(/^\d{4,5}-\d{2}-\d{2}$/.test(timestamp.toString())){rowDate=new Date(timestamp)}else{rowDate=new Date((timestamp-25569)*86400*1e3);rowDate.setTime(rowDate.getTime()+rowDate.getTimezoneOffset()*60*1e3)}}return rowDate>=selectedDate})}else if(dateFilterMode===`before${rowIndex}`){filteredRows=filteredRows.filter(rowData=>{let timestamp=rowData[rowIndex];let rowDate;if(timestamp!==undefined&&timestamp!==null){if(/^\d{4,5}-\d{2}-\d{2}$/.test(timestamp.toString())){rowDate=new Date(timestamp)}else{let rowDate=new Date((timestamp-25569)*86400*1e3);rowDate.setTime(rowDate.getTime()+rowDate.getTimezoneOffset()*60*1e3)}}return rowDate<=selectedDate})}}else{filteredRows=filteredRows.filter(rowData=>{let rowValue=rowData[rowIndex];if(rowValue===undefined||rowValue===null||rowValue===""){return false}if(typeof rowValue==="number"){let size=$(`input[name="size${rowIndex}"]:checked`).val();let selectedValue=parseFloat(selectedValues[0]);if(size==="larger"){return rowValue>=selectedValue}else if(size==="smaller"){return rowValue<=selectedValue}}if(typeof rowValue!=="number"){if(!Array.isArray(rowValue)){if(rowValue.startsWith("[")&&rowValue.endsWith("]")){let rowValueJSON=rowValue.replace(/'/g,'"');let rowValueArray;try{rowValueArray=JSON.parse(rowValueJSON)}catch(error){console.error("Unable to parse JSON:",error)}if(rowValueArray){return selectedValues.some(selectedValue=>rowValueArray.includes(selectedValue))}}else{let rowValueStr=String(rowValue);return selectedValues.some(selectedValue=>rowValueStr.includes(selectedValue))}}}})}});let statistics=calculateStatistics(filteredRows);displayStatistics(statistics,headers)})}